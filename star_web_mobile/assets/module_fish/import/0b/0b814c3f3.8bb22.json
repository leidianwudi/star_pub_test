[1,["d57a4e5c-b3b0-47a2-b731-d196469a44ba@6c48a","0b8a62f1-910b-42ac-99ba-69830eae8c38@6c48a","fd1fa47e-0a09-409f-97b2-50079c03b943"],["waveTexture","causticTexture","_effectAsset"],[["cc.Material",["_name","_states","_defines","_props"],0,12],["cc.EffectAsset",["_name","shaders","techniques"],0]],[[0,0,1,2,3,4],[1,0,1,2,4]],[[[[0,"water-wave",[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{"USE_TILING":true,"USE_WAVE":true,"USE_CAUSTIC":true,"USE_COLOR_STEP":true,"USE_ALPHA_STEP":true}],[[[{"waveSpeed":0.13,"waveStrenth":0.015,"causticStrength":0.3,"causticScale":0.65,"causticSpeed":0.08,"causticRGBSplit":0.5,"colorStepUv":2.15,"alphaStepUv":10},"tiling",8,[0,1,0.6],"waveDirection",8,[0,0.6,0.3],"causticColor",8,[4,4282058763],"waveTexture",6,0,"causticTexture",6,1]],11]]],0,0,[0,0,0],[0,1,2],[0,1,2]],[[[1,"../module_fish/fishGame/shaders/water-wave",[{"hash":1603384823,"name":"../module_fish/fishGame/shaders/water-wave|wave-vs:vert|wave-fs:frag","blocks":[{"name":"VsConstant","stageFlags":1,"binding":0,"members":[{"name":"tiling","type":14,"count":1}],"defines":["USE_TILING"]},{"name":"Constant","stageFlags":16,"binding":1,"members":[{"name":"colorStepUv","type":13,"count":1},{"name":"alphaStepUv","type":13,"count":1}],"defines":[]},{"name":"WaveSize","stageFlags":16,"binding":2,"members":[{"name":"resolution","type":14,"count":1},{"name":"tstime","type":13,"count":1}],"defines":[]},{"name":"WaveConstant","stageFlags":16,"binding":3,"members":[{"name":"waveDirection","type":14,"count":1},{"name":"waveSpeed","type":13,"count":1},{"name":"waveStrenth","type":13,"count":1}],"defines":["USE_WAVE"]},{"name":"CausticConstant","stageFlags":16,"binding":4,"members":[{"name":"causticParams1","type":16,"count":1},{"name":"causticParams2","type":16,"count":1}],"defines":["USE_CAUSTIC"]}],"samplerTextures":[{"name":"waveTexture","type":28,"count":1,"stageFlags":16,"binding":5,"defines":["USE_WAVE"]},{"name":"causticTexture","type":28,"count":1,"stageFlags":16,"binding":6,"defines":["USE_CAUSTIC"]}],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[],"attributes":[{"name":"a_position","format":32,"location":0,"defines":[]},{"name":"a_texCoord","format":21,"location":1,"defines":[]},{"name":"a_color","format":44,"location":2,"defines":[]}],"fragColors":[{"name":"cc_FragColor","typename":"vec4","type":16,"count":1,"stageFlags":16,"location":0,"defines":[]}],"descriptors":[{"rate":0,"blocks":[{"name":"CCLocal","stageFlags":1,"tags":{"builtin":"local"},"members":[{"name":"cc_matWorld","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matWorldIT","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_lightingMapUVParam","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_localShadowBias","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_reflectionProbeData1","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_reflectionProbeData2","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_reflectionProbeBlendData1","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_reflectionProbeBlendData2","typename":"vec4","type":16,"count":1,"precision":"highp "}],"defines":["USE_LOCAL"]}],"samplerTextures":[{"name":"cc_spriteTexture","typename":"sampler2D","type":28,"count":1,"stageFlags":16,"tags":{"builtin":"local"},"defines":[]}],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[]},{"rate":1,"blocks":[{"name":"VsConstant","stageFlags":1,"binding":0,"members":[{"name":"tiling","type":14,"count":1}],"defines":["USE_TILING"]},{"name":"Constant","stageFlags":16,"binding":1,"members":[{"name":"colorStepUv","type":13,"count":1},{"name":"alphaStepUv","type":13,"count":1}],"defines":[]},{"name":"WaveSize","stageFlags":16,"binding":2,"members":[{"name":"resolution","type":14,"count":1},{"name":"tstime","type":13,"count":1}],"defines":[]},{"name":"WaveConstant","stageFlags":16,"binding":3,"members":[{"name":"waveDirection","type":14,"count":1},{"name":"waveSpeed","type":13,"count":1},{"name":"waveStrenth","type":13,"count":1}],"defines":["USE_WAVE"]},{"name":"CausticConstant","stageFlags":16,"binding":4,"members":[{"name":"causticParams1","type":16,"count":1},{"name":"causticParams2","type":16,"count":1}],"defines":["USE_CAUSTIC"]}],"samplerTextures":[{"name":"waveTexture","type":28,"count":1,"stageFlags":16,"binding":5,"defines":["USE_WAVE"]},{"name":"causticTexture","type":28,"count":1,"stageFlags":16,"binding":6,"defines":["USE_CAUSTIC"]}],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[]},{"rate":2,"blocks":[],"samplerTextures":[],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[]},{"rate":3,"blocks":[{"name":"CCGlobal","stageFlags":17,"tags":{"builtin":"global"},"members":[{"name":"cc_time","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_screenSize","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_nativeSize","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_probeInfo","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_debug_view_mode","typename":"vec4","type":16,"count":1,"precision":"mediump "}],"defines":[]},{"name":"CCCamera","stageFlags":17,"tags":{"builtin":"global"},"members":[{"name":"cc_matView","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matViewInv","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matProj","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matProjInv","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matViewProj","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matViewProjInv","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_cameraPos","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_surfaceTransform","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_screenScale","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_exposure","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_mainLitDir","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_mainLitColor","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_ambientSky","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_ambientGround","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_fogColor","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_fogBase","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_fogAdd","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_nearFar","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_viewPort","typename":"vec4","type":16,"count":1,"precision":"mediump "}],"defines":[]}],"samplerTextures":[],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[]}],"glsl3":{"vert":"\nprecision mediump float;\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n  mediump vec4 cc_probeInfo;\n  mediump vec4 cc_debug_view_mode;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_surfaceTransform;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\n#if USE_LOCAL\n  layout(std140) uniform CCLocal {\n    highp mat4 cc_matWorld;\n    highp mat4 cc_matWorldIT;\n    highp vec4 cc_lightingMapUVParam;\n    highp vec4 cc_localShadowBias;\n    highp vec4 cc_reflectionProbeData1;\n    highp vec4 cc_reflectionProbeData2;\n    highp vec4 cc_reflectionProbeBlendData1;\n    highp vec4 cc_reflectionProbeBlendData2;\n  };\n#endif\n#if SAMPLE_FROM_RT\n  #define QUATER_PI         0.78539816340\n  #define HALF_PI           1.57079632679\n  #define PI                3.14159265359\n  #define PI2               6.28318530718\n  #define PI4               12.5663706144\n  #define INV_QUATER_PI     1.27323954474\n  #define INV_HALF_PI       0.63661977237\n  #define INV_PI            0.31830988618\n  #define INV_PI2           0.15915494309\n  #define INV_PI4           0.07957747155\n  #define EPSILON           1e-6\n  #define EPSILON_LOWP      1e-4\n  #define LOG2              1.442695\n  #define EXP_VALUE         2.71828183\n  #define FP_MAX            65504.0\n  #define FP_SCALE          0.0009765625\n  #define FP_SCALE_INV      1024.0\n  #define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\n      #define LIGHT_MAP_TYPE_DISABLED 0\n  #define LIGHT_MAP_TYPE_ALL_IN_ONE 1\n  #define LIGHT_MAP_TYPE_INDIRECT_OCCLUSION 2\n  #define REFLECTION_PROBE_TYPE_NONE 0\n  #define REFLECTION_PROBE_TYPE_CUBE 1\n  #define REFLECTION_PROBE_TYPE_PLANAR 2\n  #define REFLECTION_PROBE_TYPE_BLEND 3\n  #define REFLECTION_PROBE_TYPE_BLEND_AND_SKYBOX 4\n      #define LIGHT_TYPE_DIRECTIONAL 0.0\n  #define LIGHT_TYPE_SPHERE 1.0\n  #define LIGHT_TYPE_SPOT 2.0\n  #define LIGHT_TYPE_POINT 3.0\n  #define LIGHT_TYPE_RANGED_DIRECTIONAL 4.0\n  #define IS_DIRECTIONAL_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_DIRECTIONAL)) < EPSILON_LOWP)\n  #define IS_SPHERE_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_SPHERE)) < EPSILON_LOWP)\n  #define IS_SPOT_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_SPOT)) < EPSILON_LOWP)\n  #define IS_POINT_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_POINT)) < EPSILON_LOWP)\n  #define IS_RANGED_DIRECTIONAL_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_RANGED_DIRECTIONAL)) < EPSILON_LOWP)\n  #define TONE_MAPPING_ACES 0\n  #define TONE_MAPPING_LINEAR 1\n  #define SURFACES_MAX_TRANSMIT_DEPTH_VALUE 999999.0\n  #ifndef CC_SURFACES_DEBUG_VIEW_SINGLE\n    #define CC_SURFACES_DEBUG_VIEW_SINGLE 1\n  #endif\n  #ifndef CC_SURFACES_DEBUG_VIEW_COMPOSITE_AND_MISC\n    #define CC_SURFACES_DEBUG_VIEW_COMPOSITE_AND_MISC 2\n  #endif\n#endif\n#if USE_TILING\nlayout(std140) uniform VsConstant{\n  vec2 tiling;\n};\n#endif\nin vec3 a_position;\nin vec2 a_texCoord;\nin vec4 a_color;\nout vec4 color;\nout vec2 uv0;\nvec4 vert () {\n  vec4 pos = vec4(a_position, 1);\n  #if USE_LOCAL\n    pos = cc_matWorld * pos;\n  #endif\n  #if USE_PIXEL_ALIGNMENT\n    pos = cc_matView * pos;\n    pos.xyz = floor(pos.xyz);\n    pos = cc_matProj * pos;\n  #else\n    pos = cc_matViewProj * pos;\n  #endif\n  uv0 = a_texCoord;\n  #if USE_TILING\n  uv0 *= tiling;\n  #endif\n  #if SAMPLE_FROM_RT\n    uv0 = cc_cameraPos.w > 1.0 ? vec2(uv0.x, 1.0 - uv0.y) : uv0;\n  #endif\n  color = a_color;\n  return pos;\n}\nvoid main() { gl_Position = vert(); }","frag":"\nprecision mediump float;\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n  mediump vec4 cc_probeInfo;\n  mediump vec4 cc_debug_view_mode;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_surfaceTransform;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\n#define PI 3.1415926\nin vec2 uv0;\nin vec4 color;\nlayout(std140) uniform Constant{\n  float colorStepUv;\n  float alphaStepUv;\n};\nlayout(std140) uniform WaveSize {\n  vec2 resolution;\n  float tstime;\n};\n#if USE_WAVE\nuniform sampler2D waveTexture;\nlayout(std140) uniform WaveConstant{\n  vec2 waveDirection;\n  float waveSpeed;\n  float waveStrenth;\n};\n#endif\n#if USE_CAUSTIC\n  layout(std140) uniform CausticConstant{\n     vec4 causticParams1;\n     vec4 causticParams2;\n  };\n  uniform sampler2D causticTexture;\n  vec2 panner(vec2 uv, float direction, float speed, vec2 offset, float tiling){\n        direction = direction * 2. - 1.;\n        vec2 dir = normalize(vec2(cos(PI * direction), sin(PI * direction)));\n        return  (dir * tstime * speed) + offset + (uv * tiling);\n  }\n  vec3 rgbSplit(float split, sampler2D tex, vec2 uv){\n        vec2 UVR = uv + vec2(split, split);\n        vec2 UVG = uv + vec2(split, -split);\n        vec2 UVB = uv + vec2(-split, -split);\n        float r = texture(tex, UVR).r;\n        float g = texture(tex, UVG).g;\n        float b = texture(tex, UVB).b;\n        return vec3(r,g,b);\n    }\n  vec3 caustic(){\n      vec2 uv = uv0;\n      float strength = causticParams1.x;\n      float split = causticParams1.w * 0.01;\n      float speed = causticParams1.z;\n      float scale = causticParams1.y;\n      vec3 texture1 = rgbSplit(split, causticTexture, panner(uv, 1., speed, vec2(0., 0.), 1./scale));\n      vec3 texture2 = rgbSplit(split, causticTexture, panner(uv, 1., speed, vec2(0., 0.), -1./scale));\n      vec3 textureCombined = min(texture1, texture2);\n      return strength * 10. * textureCombined;\n    }\n#endif\nuniform sampler2D cc_spriteTexture;\nvec4 frag () {\n  vec4 o = vec4(1, 1, 1, 1);\n  vec2 uv = uv0;\n  #if USE_WAVE\n     float time = cc_time.x * waveSpeed;\n     vec2 offset = texture(waveTexture,uv0 + time * waveDirection).xy*waveStrenth;\n     uv += offset;\n  #endif\n  o = texture(cc_spriteTexture, uv);\n  o *= color;\n  #if USE_CAUSTIC\n     float causticDepth = causticParams2.x;\n     vec3 causticColor = causticParams2.yzw;\n     o.rgb += caustic() * causticColor;\n  #endif\n  #if USE_COLOR_STEP\n  o.rgb *= smoothstep(1.5,-0.1,uv0.y*colorStepUv) ;\n  #endif\n  #if USE_ALPHA_STEP\n  o.a *= smoothstep(-0.2,0.75,uv0.y*alphaStepUv) ;\n  #endif\n  return o;\n}\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = frag(); }"},"glsl1":{"vert":"\nprecision mediump float;\nuniform highp mat4 cc_matView;\n  uniform highp mat4 cc_matProj;\n  uniform highp mat4 cc_matViewProj;\n  uniform highp vec4 cc_cameraPos;\n#if USE_LOCAL\n  uniform highp mat4 cc_matWorld;\n#endif\n#if SAMPLE_FROM_RT\n  #define QUATER_PI         0.78539816340\n  #define HALF_PI           1.57079632679\n  #define PI                3.14159265359\n  #define PI2               6.28318530718\n  #define PI4               12.5663706144\n  #define INV_QUATER_PI     1.27323954474\n  #define INV_HALF_PI       0.63661977237\n  #define INV_PI            0.31830988618\n  #define INV_PI2           0.15915494309\n  #define INV_PI4           0.07957747155\n  #define EPSILON           1e-6\n  #define EPSILON_LOWP      1e-4\n  #define LOG2              1.442695\n  #define EXP_VALUE         2.71828183\n  #define FP_MAX            65504.0\n  #define FP_SCALE          0.0009765625\n  #define FP_SCALE_INV      1024.0\n  #define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\n      #define LIGHT_MAP_TYPE_DISABLED 0\n  #define LIGHT_MAP_TYPE_ALL_IN_ONE 1\n  #define LIGHT_MAP_TYPE_INDIRECT_OCCLUSION 2\n  #define REFLECTION_PROBE_TYPE_NONE 0\n  #define REFLECTION_PROBE_TYPE_CUBE 1\n  #define REFLECTION_PROBE_TYPE_PLANAR 2\n  #define REFLECTION_PROBE_TYPE_BLEND 3\n  #define REFLECTION_PROBE_TYPE_BLEND_AND_SKYBOX 4\n      #define LIGHT_TYPE_DIRECTIONAL 0.0\n  #define LIGHT_TYPE_SPHERE 1.0\n  #define LIGHT_TYPE_SPOT 2.0\n  #define LIGHT_TYPE_POINT 3.0\n  #define LIGHT_TYPE_RANGED_DIRECTIONAL 4.0\n  #define IS_DIRECTIONAL_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_DIRECTIONAL)) < EPSILON_LOWP)\n  #define IS_SPHERE_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_SPHERE)) < EPSILON_LOWP)\n  #define IS_SPOT_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_SPOT)) < EPSILON_LOWP)\n  #define IS_POINT_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_POINT)) < EPSILON_LOWP)\n  #define IS_RANGED_DIRECTIONAL_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_RANGED_DIRECTIONAL)) < EPSILON_LOWP)\n  #define TONE_MAPPING_ACES 0\n  #define TONE_MAPPING_LINEAR 1\n  #define SURFACES_MAX_TRANSMIT_DEPTH_VALUE 999999.0\n  #ifndef CC_SURFACES_DEBUG_VIEW_SINGLE\n    #define CC_SURFACES_DEBUG_VIEW_SINGLE 1\n  #endif\n  #ifndef CC_SURFACES_DEBUG_VIEW_COMPOSITE_AND_MISC\n    #define CC_SURFACES_DEBUG_VIEW_COMPOSITE_AND_MISC 2\n  #endif\n#endif\n#if USE_TILING\n  uniform vec2 tiling;\n#endif\nattribute vec3 a_position;\nattribute vec2 a_texCoord;\nattribute vec4 a_color;\nvarying vec4 color;\nvarying vec2 uv0;\nvec4 vert () {\n  vec4 pos = vec4(a_position, 1);\n  #if USE_LOCAL\n    pos = cc_matWorld * pos;\n  #endif\n  #if USE_PIXEL_ALIGNMENT\n    pos = cc_matView * pos;\n    pos.xyz = floor(pos.xyz);\n    pos = cc_matProj * pos;\n  #else\n    pos = cc_matViewProj * pos;\n  #endif\n  uv0 = a_texCoord;\n  #if USE_TILING\n  uv0 *= tiling;\n  #endif\n  #if SAMPLE_FROM_RT\n    uv0 = cc_cameraPos.w > 1.0 ? vec2(uv0.x, 1.0 - uv0.y) : uv0;\n  #endif\n  color = a_color;\n  return pos;\n}\nvoid main() { gl_Position = vert(); }","frag":"\nprecision mediump float;\nuniform highp vec4 cc_time;\n#define PI 3.1415926\nvarying vec2 uv0;\nvarying vec4 color;\n  uniform float colorStepUv;\n  uniform float alphaStepUv;\n   uniform float tstime;\n#if USE_WAVE\nuniform sampler2D waveTexture;\n  uniform vec2 waveDirection;\n  uniform float waveSpeed;\n  uniform float waveStrenth;\n#endif\n#if USE_CAUSTIC\n      uniform vec4 causticParams1;\n    uniform vec4 causticParams2;\n  uniform sampler2D causticTexture;\n  vec2 panner(vec2 uv, float direction, float speed, vec2 offset, float tiling){\n        direction = direction * 2. - 1.;\n        vec2 dir = normalize(vec2(cos(PI * direction), sin(PI * direction)));\n        return  (dir * tstime * speed) + offset + (uv * tiling);\n  }\n  vec3 rgbSplit(float split, sampler2D tex, vec2 uv){\n        vec2 UVR = uv + vec2(split, split);\n        vec2 UVG = uv + vec2(split, -split);\n        vec2 UVB = uv + vec2(-split, -split);\n        float r = texture2D(tex, UVR).r;\n        float g = texture2D(tex, UVG).g;\n        float b = texture2D(tex, UVB).b;\n        return vec3(r,g,b);\n    }\n  vec3 caustic(){\n      vec2 uv = uv0;\n      float strength = causticParams1.x;\n      float split = causticParams1.w * 0.01;\n      float speed = causticParams1.z;\n      float scale = causticParams1.y;\n      vec3 texture1 = rgbSplit(split, causticTexture, panner(uv, 1., speed, vec2(0., 0.), 1./scale));\n      vec3 texture2 = rgbSplit(split, causticTexture, panner(uv, 1., speed, vec2(0., 0.), -1./scale));\n      vec3 textureCombined = min(texture1, texture2);\n      return strength * 10. * textureCombined;\n    }\n#endif\nuniform sampler2D cc_spriteTexture;\nvec4 frag () {\n  vec4 o = vec4(1, 1, 1, 1);\n  vec2 uv = uv0;\n  #if USE_WAVE\n     float time = cc_time.x * waveSpeed;\n     vec2 offset = texture2D(waveTexture,uv0 + time * waveDirection).xy*waveStrenth;\n     uv += offset;\n  #endif\n  o = texture2D(cc_spriteTexture, uv);\n  o *= color;\n  #if USE_CAUSTIC\n     float causticDepth = causticParams2.x;\n     vec3 causticColor = causticParams2.yzw;\n     o.rgb += caustic() * causticColor;\n  #endif\n  #if USE_COLOR_STEP\n  o.rgb *= smoothstep(1.5,-0.1,uv0.y*colorStepUv) ;\n  #endif\n  #if USE_ALPHA_STEP\n  o.a *= smoothstep(-0.2,0.75,uv0.y*alphaStepUv) ;\n  #endif\n  return o;\n}\nvoid main() { gl_FragColor = frag(); }"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]},{"name":"CCCamera","defines":[]}],"samplerTextures":[],"buffers":[],"images":[]},"locals":{"blocks":[{"name":"CCLocal","defines":["USE_LOCAL"]}],"samplerTextures":[{"name":"cc_spriteTexture","defines":[]}],"buffers":[],"images":[]},"statistics":{"CC_EFFECT_USED_VERTEX_UNIFORM_VECTORS":57,"CC_EFFECT_USED_FRAGMENT_UNIFORM_VECTORS":51}},"defines":[{"name":"USE_LOCAL","type":"boolean"},{"name":"SAMPLE_FROM_RT","type":"boolean"},{"name":"USE_TILING","type":"boolean"},{"name":"USE_PIXEL_ALIGNMENT","type":"boolean"},{"name":"USE_WAVE","type":"boolean"},{"name":"USE_CAUSTIC","type":"boolean"},{"name":"USE_COLOR_STEP","type":"boolean"},{"name":"USE_ALPHA_STEP","type":"boolean"}]}],[{"passes":[{"program":"../module_fish/fishGame/shaders/water-wave|wave-vs:vert|wave-fs:frag","blendState":{"targets":[{"blend":true,"blendSrc":2,"blendDst":4,"blendDstAlpha":4}]},"rasterizerState":{"cullMode":0},"depthStencilState":{"depthTest":false,"depthWrite":false},"properties":{"tiling":{"type":14,"value":[1,0.5]},"waveTexture":{"value":"white","type":28},"waveDirection":{"type":14,"value":[0.5,0.5]},"waveSpeed":{"type":13,"value":[0.5]},"waveStrenth":{"type":13,"value":[0.01]},"causticStrength":{"type":13,"value":[0.98],"handleInfo":["causticParams1",0,13]},"causticScale":{"type":13,"value":[2.33],"handleInfo":["causticParams1",1,13]},"causticSpeed":{"type":13,"value":[0.1],"handleInfo":["causticParams1",2,13]},"causticRGBSplit":{"type":13,"value":[0.35],"handleInfo":["causticParams1",3,13]},"causticDepth":{"type":13,"value":[1],"handleInfo":["causticParams2",0,13]},"causticColor":{"type":15,"value":[1,1,1],"handleInfo":["causticParams2",1,15]},"causticTexture":{"value":"white","type":28},"colorStepUv":{"type":13,"value":[1]},"alphaStepUv":{"type":13,"value":[1]},"causticParams1":{"type":16,"value":[0.98,2.33,0.1,0.35]},"causticParams2":{"type":16,"value":[1,1,1,1]}}}]}]]],0,0,[],[],[]]]]
