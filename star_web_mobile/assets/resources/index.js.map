{"version":3,"sources":["../file:/D:/work/github/star_client/assets/resources/multTextures/file:/D:/work/github/star_client/assets/resources/multTextures/MultTextures.ts"],"names":["MultBatch2D","enable","parent","textures","hash","reset","length","loadMultTextures","resources","load","Material","err","material","mat","cclegacy","builtinResMgr","get","getHash","addRef","_cacheUseCount","_cacheMaterials","getMultMaterial","oldMat","isMultTextures","isValid","newMat","renderer","MaterialInstance","excludeMaterial","uir","TiledLayer","MotionStreak","ParticleSystem2D","game","once","Game","EVENT_GAME_INITED","UIR","UIRenderer","prototype","updateMaterial","call","customMaterial","EVENT_ENGINE_INITED","UI","RenderData","texID","isSpr","texDirty","dataDirty","Object","defineProperty","_vertDirty","set","val","_renderDrawInfo","setVertDirty","str","VERSION","concat","replace","parseInt","markForUpdateRenderData","renderData","updateRenderer","SPRA","spriteAssembler","getAssembler","sprite","spr","changeUV","undefined","s","rd","UVs","updateUVs","type","Sprite","Type","FILLED","fillType","FillType","RADIAL","f0","f1","verUV","updateWorldVertexAndUVData","c","internal","Batcher2D","cacheTextures","currMaterial","metrial","director","on","Director","EVENT_AFTER_DRAW","dt","_rdHash","MAX_TEX","_texture","texture","SimpleTexture","defalut","setFrame","frame","getGFXSampler","getGFXTexture","Stage_ENTER_LEVEL","Stage_ENTER_LEVEL_INVERTED","commitComp","comp","assembler","transform","rdHash","dataHash","bufferID","chunk","bufferId","layer","stencilStage","_insertMaskBatch","StencilManager","sharedManager","stage","depthStencilStateStage","MB","flushBatch","indexOf","_currMaterial","_currHash","_currDepthStencilStateStage","autoMergeBatches","_currComponent","_isMeshBuffer","updateBuffer","vertexFormat","_currRenderData","_currTransform","getRenderMaterial","_currLayer","node","assert","_currTexture","_currSampler","_currTextureHash","_currSamplerHash","fillBuffers","push","id","objectID","caches","name","setProperty","_fillDatas","uvX","vbuf","vb","i","_RF","pop"],"mappings":"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","file":"all.js","sourcesContent":["//*//\r\nimport { BaseRenderData, Director, Game, Material, MotionStreak, Node, ParticleSystem2D, Sprite, SpriteFrame, StencilManager, TiledLayer, TransformBit, UIRenderer, VERSION, __private, assert, cclegacy, director, game, gfx, renderer, resources } from 'cc';\r\nimport { DEBUG, EDITOR, JSB } from 'cc/env';\r\n\r\n\r\nexport const MultBatch2D: any = {\r\n    enable: false,\r\n    parent: null,\r\n    textures: [],\r\n    hash: 0,\r\n    reset: function () {\r\n        this.textures.length = 0;\r\n    }\r\n};\r\n\r\n\r\nconst loadMultTextures = function () {\r\n    MultBatch2D.enable = false; //提前加载多纹理材质\r\n    resources.load(\"multTextures/Mult-material\", Material, (err, material) => {\r\n        if (!err) {\r\n            let mat = cclegacy.builtinResMgr.get('ui-sprite-material');\r\n            if (mat) {\r\n                MultBatch2D.hash = Material.getHash(mat);\r\n                MultBatch2D.parent = material;\r\n                MultBatch2D.enable = true;\r\n                material.addRef();\r\n            }\r\n        }\r\n    });\r\n}\r\n\r\n\r\nlet _cacheUseCount: number = 0;\r\nlet _cacheMaterials: Array<Material> = [];\r\nconst getMultMaterial = function (oldMat: any) {\r\n\r\n    MultBatch2D.reset();\r\n\r\n    if (!MultBatch2D.enable ||\r\n        !oldMat || !oldMat.isMultTextures) {\r\n        return oldMat;\r\n    }\r\n\r\n    if (!MultBatch2D.parent\r\n        || !MultBatch2D.parent.isValid) {\r\n        loadMultTextures();\r\n        return oldMat;\r\n    }\r\n\r\n    //if (!MultBatch2D.enable) return null;\r\n    let newMat: any = _cacheMaterials[_cacheUseCount++];\r\n    if (!newMat || !newMat.isValid) {\r\n        const material = { parent: MultBatch2D.parent };\r\n        newMat = new renderer.MaterialInstance(material);\r\n        _cacheMaterials[_cacheUseCount - 1] = newMat;\r\n        newMat['isMultTextures'] = true;\r\n        newMat['cacheTextures'] = [-1];\r\n        newMat.addRef();\r\n    }\r\n\r\n    return newMat;\r\n}\r\n\r\n//如果有异常组件，或者自定义组件，\r\n//在这进行添加排除,不参与多纹理合批\r\nconst excludeMaterial = function (uir: UIRenderer, material: any) {\r\n    if (!material) return;\r\n\r\n    let enable: boolean = true;\r\n    if (enable && TiledLayer) {\r\n        enable = !(uir instanceof TiledLayer);\r\n    }\r\n    if (enable && MotionStreak) {\r\n        enable = !(uir instanceof MotionStreak);\r\n    }\r\n    if (enable && ParticleSystem2D) {\r\n        enable = !(uir instanceof ParticleSystem2D);\r\n    }\r\n\r\n\r\n    material['isMultTextures'] = false;\r\n    if (enable && MultBatch2D.hash == material.hash) {\r\n        material['isMultTextures'] = true;\r\n    }\r\n}\r\n\r\ngame.once(Game.EVENT_GAME_INITED, () => {\r\n    if (EDITOR || JSB) return;\r\n\r\n    loadMultTextures();\r\n    const UIR: any = UIRenderer.prototype;\r\n    const updateMaterial: any = UIR.updateMaterial;\r\n    UIR.updateMaterial = function () {\r\n        updateMaterial.call(this); //this.getSharedMaterial(0);\r\n        excludeMaterial(this, this.customMaterial || this.material);\r\n    }\r\n\r\n});\r\n\r\n\r\n\r\ngame.once(Game.EVENT_ENGINE_INITED, () => {\r\n    if (EDITOR || JSB) return;\r\n\r\n    cclegacy.UI.RenderData.prototype.texID = -1;\r\n    cclegacy.UI.RenderData.prototype.isSpr = false;\r\n    cclegacy.UI.RenderData.prototype.texDirty = true;\r\n    cclegacy.UI.RenderData.prototype.dataDirty = 0x0;\r\n\r\n    Object.defineProperty(cclegacy.UI.RenderData.prototype, \"vertDirty\", {\r\n        get: function () {\r\n            return this._vertDirty;\r\n        },\r\n        set: function (val: boolean) {\r\n            this._vertDirty = val;\r\n            if (val === true && !this.isSpr) {\r\n                this.dataDirty |= 1;\r\n            }\r\n            if (this._renderDrawInfo && val) {\r\n                this._renderDrawInfo.setVertDirty(val);\r\n            }\r\n        }\r\n    });\r\n\r\n    Object.defineProperty(cclegacy.UI.RenderData.prototype, \"textureDirty\", {\r\n        get: function () {\r\n            return this.texDirty;\r\n        },\r\n        set: function (val: boolean) {\r\n            this.texDirty = val;\r\n            if (val === true) {\r\n                this.texID = -1;\r\n            }\r\n        }\r\n    });\r\n\r\n\r\n    let str = (VERSION.concat());\r\n    str = str.replace('.','').replace('.','');\r\n    if( parseInt( str ) < 384) { //修复 renderManager 刷新 bug\r\n\r\n        const UIR: any = UIRenderer.prototype;\r\n        const markForUpdateRenderData = UIR.markForUpdateRenderData;\r\n        UIR.markForUpdateRenderData = function(enable = true){\r\n            markForUpdateRenderData.call(this,enable);\r\n            if(enable && this.renderData) {\r\n                if(!this.renderData.isSpr)\r\n                this.renderData.dataDirty |= 2;\r\n            }\r\n        }\r\n\r\n        const updateRenderer = UIR.updateRenderer;\r\n        UIR.updateRenderer = function(){\r\n            updateRenderer.call(this);\r\n            if(this.renderData){\r\n                if(!this.renderData.isSpr)\r\n                this.renderData.dataDirty &=(~2);\r\n            }\r\n            \r\n        }\r\n\r\n    }\r\n\r\n\r\n   let SPRA: any = cclegacy.UI.spriteAssembler;\r\n   if (SPRA) {\r\n       const spriteAssembler = SPRA.getAssembler;\r\n       SPRA.getAssembler = function (sprite: Sprite) {\r\n           const spr = spriteAssembler.call(this, sprite);\r\n           if(spr.changeUV == undefined){\r\n               spr.changeUV = function(s:any){\r\n                   let rd = s.renderData;\r\n                   if(rd){\r\n                       rd.dataDirty = 1;\r\n                       rd.isSpr = true;\r\n                   }\r\n               };\r\n\r\n               const UVs = spr.updateUVs;\r\n               if(UVs){\r\n                   if(sprite.type == Sprite.Type.FILLED && \r\n                       sprite.fillType != Sprite.FillType.RADIAL){\r\n                       spr.updateUVs = function(s: any, f0: number, f1: number){\r\n                           UVs.call(this,s,f0,f1);\r\n                           this.changeUV(s);\r\n                       }\r\n                   }else{\r\n                       spr.updateUVs = function(s:any){\r\n                           UVs.call(this,s);\r\n                           this.changeUV(s);\r\n                       }\r\n                   }\r\n     \r\n               }\r\n              \r\n               const verUV =  spr.updateWorldVertexAndUVData;\r\n               if(verUV){\r\n                   spr.updateWorldVertexAndUVData = function(s:any, c:any){\r\n                       verUV.call(this,s, c);\r\n                       this.changeUV(s);\r\n                   }\r\n               }\r\n           }\r\n           \r\n           return spr;\r\n       }\r\n   }\r\n\r\n\r\n    cclegacy.internal.Batcher2D.prototype.cacheTextures = [];\r\n    cclegacy.internal.Batcher2D.prototype.currMaterial = null;\r\n    cclegacy.internal.Batcher2D.prototype.isMultTextures = false;\r\n    Object.defineProperty(cclegacy.internal.Batcher2D.prototype, \"_currMaterial\", {\r\n        get: function () {\r\n            return this.currMaterial;\r\n        },\r\n        set: function (metrial: any) {\r\n            if (this.currMaterial === metrial) return;\r\n            this.currMaterial = getMultMaterial(metrial);\r\n            if (MultBatch2D.enable) {\r\n                this.isMultTextures = false;\r\n                if (this.currMaterial && this.currMaterial.isMultTextures) {\r\n                    this.cacheTextures = this.currMaterial.cacheTextures;\r\n                    this.isMultTextures = true;\r\n                }\r\n            }\r\n        }\r\n    });\r\n\r\n    director.on(Director.EVENT_AFTER_DRAW, (dt) => {\r\n        cclegacy.internal.Batcher2D.isMultTextures = false;\r\n        cclegacy.internal.Batcher2D._rdHash = -1;\r\n        MultBatch2D.reset();\r\n        _cacheUseCount = 0;\r\n    });\r\n\r\n    const MAX_TEX = 8;\r\n    const _texture = {\r\n        texture: new cclegacy.SimpleTexture(),\r\n        defalut: new cclegacy.SimpleTexture(),\r\n        setFrame(frame: any) {\r\n            this.texture['_gfxSampler'] = frame.getGFXSampler();\r\n            this.texture['_gfxTextureView'] = frame.getGFXTexture();\r\n        }\r\n    };\r\n\r\n    const Stage_ENTER_LEVEL = 2;\r\n    const Stage_ENTER_LEVEL_INVERTED = 6;\r\n    cclegacy.internal.Batcher2D.prototype._rdHash = -1;\r\n    //@ts-ignore\r\n    type TextureBase = __private._cocos_asset_assets_texture_base__TextureBase;\r\n    cclegacy.internal.Batcher2D.prototype.commitComp = function (comp: UIRenderer, renderData: BaseRenderData | null, frame: TextureBase | SpriteFrame | null, assembler: any, transform: Node | null) {\r\n\r\n        let rdHash = -1;\r\n        let dataHash = 0;\r\n        let mat: any;\r\n        let bufferID = -1;\r\n\r\n        if (renderData && renderData.chunk) {\r\n            if (!renderData.isValid()) return;\r\n            dataHash = renderData.dataHash;\r\n            mat = renderData.material;\r\n            bufferID = renderData.chunk.bufferId;\r\n            // as RenderData;\r\n            let rd: any = renderData;\r\n            rdHash = bufferID << 16 | rd.layer;\r\n\r\n        }\r\n\r\n        // Notice: A little hack, if it is for mask, not need update here, while control by stencilManger\r\n        if (comp.stencilStage === Stage_ENTER_LEVEL || comp.stencilStage === Stage_ENTER_LEVEL_INVERTED) {\r\n            this._insertMaskBatch(comp);\r\n        } else {\r\n            comp.stencilStage = StencilManager.sharedManager!.stage;\r\n        }\r\n        const depthStencilStateStage = comp.stencilStage;\r\n\r\n\r\n        let texID = -1;\r\n        let texture = null;\r\n        let MB = MultBatch2D;\r\n        let flushBatch = false;\r\n        let isMultTextures = false;\r\n        let textures = MultBatch2D.textures;\r\n\r\n        if (MB.enable && mat && mat.isMultTextures) {\r\n            if(frame && frame.isValid) \r\n                texture = frame.getGFXTexture();\r\n            if (texture) {\r\n\r\n                texID = textures.indexOf(texture);\r\n                isMultTextures = true;\r\n                if (texID < 0) {\r\n                    if (textures.length == MAX_TEX) {\r\n                        flushBatch = true;\r\n                    }\r\n                }\r\n\r\n                if (this.isMultTextures) {\r\n                    mat = this._currMaterial;\r\n                    dataHash = this._currHash;\r\n                    if (this._rdHash != rdHash) {\r\n                        flushBatch = true;\r\n                        texID = -1;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n\r\n        if (flushBatch\r\n            || this._currHash !== dataHash || dataHash === 0 || this._currMaterial !== mat\r\n            || this._currDepthStencilStateStage !== depthStencilStateStage) {\r\n            // Merge all previous data to a render batch, and update buffer for next render data\r\n            this.autoMergeBatches(this._currComponent!);\r\n            if (renderData && !renderData._isMeshBuffer) {\r\n                this.updateBuffer(renderData.vertexFormat, bufferID);\r\n            }\r\n\r\n            this._rdHash = rdHash;\r\n            this._currRenderData = renderData;\r\n            this._currHash = renderData ? renderData.dataHash : 0;\r\n            this._currComponent = comp;\r\n            this._currTransform = transform;\r\n            this._currMaterial = comp.getRenderMaterial(0)!;\r\n            this._currDepthStencilStateStage = depthStencilStateStage;\r\n            this._currLayer = comp.node.layer;\r\n            if (frame) {\r\n                if (DEBUG) {\r\n                    assert(frame.isValid, 'frame should not be invalid, it may have been released');\r\n                }\r\n                this._currTexture = frame.getGFXTexture();\r\n                this._currSampler = frame.getGFXSampler();\r\n                this._currTextureHash = frame.getHash();\r\n                this._currSamplerHash = this._currSampler.hash;\r\n            } else {\r\n                this._currTexture = null;\r\n                this._currSampler = null;\r\n                this._currTextureHash = 0;\r\n                this._currSamplerHash = 0;\r\n            }\r\n        }\r\n\r\n        assembler.fillBuffers(comp, this);\r\n\r\n\r\n        if (isMultTextures) {\r\n            if (texID < 0) {\r\n                texID = textures.length;\r\n                textures.push(texture);\r\n\r\n                if (texID > 0) {\r\n                    //@ts-ignore\r\n                    let id = texture.objectID;\r\n                    let caches = this.cacheTextures;\r\n                    if (caches[texID] !== id) {\r\n                        caches[texID] = id;\r\n                        _texture.setFrame(frame);\r\n                        const name = \"texture\" + texID;\r\n                        this._currMaterial.setProperty(name, _texture.texture);\r\n                    }\r\n                }\r\n            }\r\n            this._fillDatas(renderData, texID);\r\n        }\r\n\r\n    }\r\n\r\n\r\n    cclegacy.internal.Batcher2D.prototype[\"_fillDatas\"] = function (renderData: any, texID: number) {\r\n\r\n\r\n        if (!renderData) return;\r\n\r\n        let uvX = 0;\r\n        let vbuf = renderData.chunk.vb;\r\n        if (renderData.dataDirty == 1) {\r\n            for (let i = 0, length = vbuf.length; i < length; i += 9) {\r\n                uvX = ~~(vbuf[i + 3] * 100000);\r\n                vbuf[i + 3] = uvX * 10 + texID;\r\n            }\r\n        } else {\r\n            if (renderData.texID != texID) {\r\n                for (let i = 0, length = vbuf.length; i < length; i += 9) {\r\n                    uvX = ~~(vbuf[i + 3] * 0.1);\r\n                    vbuf[i + 3] = uvX * 10 + texID;\r\n                }\r\n            }\r\n        }\r\n        renderData.dataDirty = 0;\r\n        renderData.texID = texID;\r\n    };\r\n});\r\n\r\n//*/\r\n"]}